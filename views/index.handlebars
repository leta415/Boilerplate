<!doctype html>

<html>
<head>
	<title>Boilerplate</title>	
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	

    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
      <script src="https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js"></script>
    <![endif]-->        
      <link rel="stylesheet" type="text/css" href="css/bootstrap.css">
      <link rel="stylesheet" type="text/css" href="css/bootstrap-theme.css">

      <style type="text/css">
        .subunit.SCT { fill: #ddc; }
        .subunit.WLS { fill: #cdd; }
        .subunit.NIR { fill: #cdc; }
        .subunit.ENG { fill: #dcd; }
        .subunit.IRL { display: none; }

        .subunit-boundary {
          fill: none;
          stroke: #777;
          stroke-dasharray: 2,2;
          stroke-linejoin: round;
        }

        .subunit-boundary.IRL {
          stroke: #aaa;
        }

        .subunit-label {
          fill: #777;
          fill-opacity: .5;
          font-size: 20px;
          font-weight: 300;
          text-anchor: middle;
        }
      </style>
</head>

<body>
  <script src="http://d3js.org/d3.v3.min.js"></script>
  <script src="http://d3js.org/topojson.v1.min.js"></script>
      
  <script>
      var width = 960, height = 1160;
      var svg = d3.select("body").append("svg")
                  .attr("width", width)
                  .attr("height", height);

      d3.json("/js/uk.json", function(error, uk) {
        if (error) return console.error(error);
        console.log(uk);

        ////////////// Display boundaries /////////////
        var subunits = topojson.feature(uk, uk.objects.subunits);
        var projection = d3.geo.albers()
              .center([0, 55.4])
              .rotate([4.4, 0])
              .parallels([50, 60])
              .scale(6000)
              .translate([width / 2, height / 2]);
        var path = d3.geo.path()
              .projection(projection);

        svg.append("path")
            .datum(subunits)
            .attr("d", path);

        // give each country its own path element so they can each have different properties (i.e. color)
        svg.selectAll(".subunit")
            .data(topojson.feature(uk, uk.objects.subunits).features)
            .enter().append("path")
            .attr("class", function(d) {return "subunit " + d.id; })
            .attr("d", path);

        // The England-Scotland and England-Wales borders are interior boundaries. We can exclude Ireland’s 
        // border with Northern Ireland by also filtering on id
        svg.append("path")
            .datum(topojson.mesh(uk, uk.objects.subunits, function(a, b) { return a !== b && a.id !== "IRL"; }))
            .attr("d", path)
            .attr("class", "subunit-boundary");

        // Irish coastline, an exterior boundary
        svg.append("path")
            .datum(topojson.mesh(uk, uk.objects.subunits, function(a, b) { return a === b && a.id === "IRL"; }))
            .attr("d", path)
            .attr("class", "subunit-boundary IRL");
        ///////////// End display boundaries //////////////


        ////////// Display places //////////////

        // Draws a dot/circle for each place
        svg.append("path")
            .datum(topojson.feature(uk, uk.objects.places))
            .attr("d", path)
            .attr("class", "place");

        // Place labels
        svg.selectAll(".place-label")
            .data(topojson.feature(uk, uk.objects.places).features)
          .enter().append("text")
            .attr("class", "place-label")
            .attr("transform", function(d) { return "translate(" + projection(d.geometry.coordinates) + ")"; })
            .attr("dy", ".35em")
            .text(function(d) { return d.properties.name; });

        // right-aligned labels on the left side of the map, and left-aligned labels on the right side of the map, 
        // here using 1°W as the threshold
        svg.selectAll(".place-label")
            .attr("x", function(d) { return d.geometry.coordinates[0] > -1 ? 6 : -6; })
            .style("text-anchor", function(d) { return d.geometry.coordinates[0] > -1 ? "start" : "end"; });

        // Country labels
        svg.selectAll(".subunit-label")
            .data(topojson.feature(uk, uk.objects.subunits).features)
          .enter().append("text")
            .attr("class", function(d) { return "subunit-label " + d.id; })
            .attr("transform", function(d) { return "translate(" + path.centroid(d) + ")"; })
            .attr("dy", ".35em")
            .text(function(d) { return d.properties.name; });
        ///////// End display places /////////////

      });
  </script>

<!--   <div class="container">
  	<h1>This is a boilerplate</h1>
  </div> -->
    
  <script src="https://code.jquery.com/jquery.js"></script>
  <script src="js/bootstrap.js"></script>
</body>
</html>
